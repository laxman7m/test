<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170119 23:25:45.205" generator="Robot 3.0.1 (Python 2.7.13 on win32)">
<suite source="C:\workspace\projects\automox_tests\api_tests\tests" id="s1" name="Tests">
<suite source="C:\workspace\projects\automox_tests\api_tests\tests\api_tests.robot" id="s1-s1" name="Api Tests">
<kw type="setup" name="Create Session To Automox API Server" library="api_keywords">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${VALID USER}</arg>
<arg>${VALID PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20170119 23:25:45.529" level="INFO">${auth} = [u'mark@patchsimple.com', u'markmark']</msg>
<status status="PASS" endtime="20170119 23:25:45.529" starttime="20170119 23:25:45.529"></status>
</kw>
<kw name="Create Session" library="RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>automoxapi</arg>
<arg>${API SERVER}</arg>
<arg>auth=${auth}</arg>
<arg>verify=False</arg>
<arg>disable_warnings=0</arg>
</arguments>
<msg timestamp="20170119 23:25:45.530" level="INFO">Creating Session using : alias=automoxapi, url=https://staging.automox.com/api, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x0404E1F0&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170119 23:25:45.530" starttime="20170119 23:25:45.529"></status>
</kw>
<status status="PASS" endtime="20170119 23:25:45.531" starttime="20170119 23:25:45.528"></status>
</kw>
<test id="s1-s1-t1" name="AX.TC3 Configuration of Patch Policy">
<kw name="Create Patch Policy" library="api_keywords">
<arguments>
<arg>api-patch-policy-01</arg>
<arg>${1}</arg>
<arg>${false}</arg>
<arg>${true}</arg>
<arg>${2}</arg>
<arg>13:10</arg>
<arg>api-patch-policy-01</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>auto_patch=${auto_patch}</arg>
<arg>auto_reboot=${auto_reboot}</arg>
</arguments>
<assign>
<var>&amp;{configuration_dict}</var>
</assign>
<msg timestamp="20170119 23:25:45.542" level="INFO">&amp;{configuration_dict} = { auto_patch=False | auto_reboot=True }</msg>
<status status="PASS" endtime="20170119 23:25:45.543" starttime="20170119 23:25:45.540"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=${name}</arg>
<arg>policy_type_name=patch</arg>
<arg>organization_id=${organization_id}</arg>
<arg>configuration=${configuration_dict}</arg>
<arg>schedule_days=${schedule_days}</arg>
<arg>schedule_time=${schedule_time}</arg>
<arg>notes=${notes}</arg>
</arguments>
<assign>
<var>&amp;{patch_policy_dict}</var>
</assign>
<msg timestamp="20170119 23:25:45.544" level="INFO">&amp;{patch_policy_dict} = { name=api-patch-policy-01 | policy_type_name=patch | organization_id=1 | configuration={u'auto_patch': False, u'auto_reboot': True} | schedule_days=2 | schedule_time=13:10 | notes=api-patch-policy-01...</msg>
<status status="PASS" endtime="20170119 23:25:45.544" starttime="20170119 23:25:45.543"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.dumps(${patch_policy_dict})</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${json_string}</var>
</assign>
<msg timestamp="20170119 23:25:45.547" level="INFO">${json_string} = {"name": "api-patch-policy-01", "schedule_time": "13:10", "schedule_days": 2, "organization_id": 1, "policy_type_name": "patch", "configuration": {"auto_patch": false, "auto_reboot": true}, "notes": "...</msg>
<status status="PASS" endtime="20170119 23:25:45.547" starttime="20170119 23:25:45.545"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>o=${organization_id}</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20170119 23:25:45.548" level="INFO">${params} = {u'o': 1}</msg>
<status status="PASS" endtime="20170119 23:25:45.548" starttime="20170119 23:25:45.547"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_string}</arg>
</arguments>
<msg timestamp="20170119 23:25:45.549" level="INFO">{"name": "api-patch-policy-01", "schedule_time": "13:10", "schedule_days": 2, "organization_id": 1, "policy_type_name": "patch", "configuration": {"auto_patch": false, "auto_reboot": true}, "notes": "api-patch-policy-01"}</msg>
<status status="PASS" endtime="20170119 23:25:45.549" starttime="20170119 23:25:45.548"></status>
</kw>
<kw name="Post Request" library="RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policies</arg>
<arg>data=${json_string}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:25:48.181" level="INFO">Post Request using : alias=automoxapi, uri=/policies, data=&lt;empty&gt;, headers=None, files=None, allow_redirects=True </msg>
<msg timestamp="20170119 23:25:48.181" level="INFO">${resp} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20170119 23:25:48.181" starttime="20170119 23:25:45.549"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20170119 23:25:48.182" level="INFO">{}</msg>
<status status="PASS" endtime="20170119 23:25:48.182" starttime="20170119 23:25:48.182"></status>
</kw>
<status status="PASS" endtime="20170119 23:25:48.182" starttime="20170119 23:25:45.538"></status>
</kw>
<kw name="Patch Policy should be created successfully" library="api_keywords">
<arguments>
<arg>api-patch-policy-01</arg>
<arg>${1}</arg>
<arg>${false}</arg>
<arg>${true}</arg>
<arg>${2}</arg>
<arg>13:10</arg>
<arg>api-patch-policy-01</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>auto_patch=${auto_patch}</arg>
<arg>auto_reboot=${auto_reboot}</arg>
</arguments>
<assign>
<var>&amp;{configuration_dict}</var>
</assign>
<msg timestamp="20170119 23:25:48.185" level="INFO">&amp;{configuration_dict} = { auto_patch=False | auto_reboot=True }</msg>
<status status="PASS" endtime="20170119 23:25:48.185" starttime="20170119 23:25:48.183"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=${name}</arg>
<arg>policy_type_name=patch</arg>
<arg>organization_id=${organization_id}</arg>
<arg>configuration=${configuration_dict}</arg>
<arg>schedule_days=${schedule_days}</arg>
<arg>schedule_time=${schedule_time}</arg>
<arg>notes=${notes}</arg>
</arguments>
<assign>
<var>&amp;{patch_policy_dict}</var>
</assign>
<msg timestamp="20170119 23:25:48.187" level="INFO">&amp;{patch_policy_dict} = { name=api-patch-policy-01 | policy_type_name=patch | organization_id=1 | configuration={u'auto_patch': False, u'auto_reboot': True} | schedule_days=2 | schedule_time=13:10 | notes=api-patch-policy-01...</msg>
<status status="PASS" endtime="20170119 23:25:48.187" starttime="20170119 23:25:48.185"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.dumps(${patch_policy_dict})</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${json_string}</var>
</assign>
<msg timestamp="20170119 23:25:48.189" level="INFO">${json_string} = {"name": "api-patch-policy-01", "schedule_time": "13:10", "schedule_days": 2, "organization_id": 1, "policy_type_name": "patch", "configuration": {"auto_patch": false, "auto_reboot": true}, "notes": "...</msg>
<status status="PASS" endtime="20170119 23:25:48.189" starttime="20170119 23:25:48.187"></status>
</kw>
<kw name="Get Request" library="RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policies</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:25:48.540" level="INFO">Get Request using : alias=automoxapi, uri=/policies, headers=None </msg>
<msg timestamp="20170119 23:25:48.541" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170119 23:25:48.541" starttime="20170119 23:25:48.189"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20170119 23:25:48.542" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170119 23:25:48.542" starttime="20170119 23:25:48.541"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>@{resp_json}</var>
</assign>
<msg timestamp="20170119 23:25:48.543" level="INFO">@{resp_json} = [ {u'name': u'Patch Policy Foo', u'schedule_time': u'01:00', u'schedule_days': 254, u'organization_id': 1, u'create_time': u'2017-01-02 01:47:06.774433', u'notes': u'Notes blah', u'policy_type_name': ...</msg>
<status status="PASS" endtime="20170119 23:25:48.543" starttime="20170119 23:25:48.542"></status>
</kw>
<kw name="Policy List Should Contain Policy Details" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${json_string}</arg>
</arguments>
<msg timestamp="20170119 23:25:48.545" level="INFO">Policy Details found in Policy List: {u'name': u'api-patch-policy-01', u'schedule_time': u'13:10', u'schedule_days': 2, u'organization_id': 1, u'create_time': u'2017-01-19 17:56:08.273599', u'notes': u'api-patch-policy-01', u'policy_type_name': u'patch', u'configuration': {u'auto_patch': False, u'auto_reboot': True}, u'id': 109}</msg>
<status status="PASS" endtime="20170119 23:25:48.545" starttime="20170119 23:25:48.544"></status>
</kw>
<status status="PASS" endtime="20170119 23:25:48.545" starttime="20170119 23:25:48.183"></status>
</kw>
<doc>**Test Case**
User should be able to create patch Policy
1. Create a patch policy with valid inputs
2. Verify whether patch policy is created successfully</doc>
<tags>
<tag>api_tests</tag>
</tags>
<status status="PASS" endtime="20170119 23:25:48.546" critical="yes" starttime="20170119 23:25:45.531"></status>
</test>
<test id="s1-s1-t2" name="AX.TC4 Create a new Policy Set">
<kw name="Create Policy Set" library="api_keywords">
<arguments>
<arg>api-policy-set-01</arg>
<arg>${1}</arg>
<arg>this is api-policy-set-01</arg>
<arg>@{EMPTY}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=${name}</arg>
<arg>organization_id=${organization_id}</arg>
<arg>notes=${notes}</arg>
<arg>policies=${policies}</arg>
</arguments>
<assign>
<var>&amp;{policy_set_dict}</var>
</assign>
<msg timestamp="20170119 23:25:48.549" level="INFO">&amp;{policy_set_dict} = { name=api-policy-set-01 | organization_id=1 | notes=this is api-policy-set-01 | policies=[] }</msg>
<status status="PASS" endtime="20170119 23:25:48.550" starttime="20170119 23:25:48.549"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.dumps(${policy_set_dict})</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${json_string}</var>
</assign>
<msg timestamp="20170119 23:25:48.551" level="INFO">${json_string} = {"organization_id": 1, "notes": "this is api-policy-set-01", "name": "api-policy-set-01", "policies": []}</msg>
<status status="PASS" endtime="20170119 23:25:48.551" starttime="20170119 23:25:48.550"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>o=${organization_id}</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20170119 23:25:48.552" level="INFO">${params} = {u'o': 1}</msg>
<status status="PASS" endtime="20170119 23:25:48.552" starttime="20170119 23:25:48.551"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_string}</arg>
</arguments>
<msg timestamp="20170119 23:25:48.552" level="INFO">{"organization_id": 1, "notes": "this is api-policy-set-01", "name": "api-policy-set-01", "policies": []}</msg>
<status status="PASS" endtime="20170119 23:25:48.552" starttime="20170119 23:25:48.552"></status>
</kw>
<kw name="Post Request" library="RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policysets</arg>
<arg>data=${json_string}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:25:48.900" level="INFO">Post Request using : alias=automoxapi, uri=/policysets, data=&lt;empty&gt;, headers=None, files=None, allow_redirects=True </msg>
<msg timestamp="20170119 23:25:48.901" level="INFO">${resp} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20170119 23:25:48.901" starttime="20170119 23:25:48.552"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20170119 23:25:48.902" level="INFO">{}</msg>
<status status="PASS" endtime="20170119 23:25:48.903" starttime="20170119 23:25:48.901"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20170119 23:25:48.904" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170119 23:25:48.904" starttime="20170119 23:25:48.903"></status>
</kw>
<status status="PASS" endtime="20170119 23:25:48.905" starttime="20170119 23:25:48.548"></status>
</kw>
<kw name="Policy Set should be created successfully" library="api_keywords">
<arguments>
<arg>api-policy-set-01</arg>
<arg>${1}</arg>
<arg>this is api-policy-set-01</arg>
<arg>@{EMPTY}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=${name}</arg>
<arg>organization_id=${organization_id}</arg>
<arg>notes=${notes}</arg>
<arg>policies=${policies}</arg>
</arguments>
<assign>
<var>&amp;{policy_set_dict}</var>
</assign>
<msg timestamp="20170119 23:25:48.911" level="INFO">&amp;{policy_set_dict} = { name=api-policy-set-01 | organization_id=1 | notes=this is api-policy-set-01 | policies=[] }</msg>
<status status="PASS" endtime="20170119 23:25:48.911" starttime="20170119 23:25:48.908"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.dumps(${policy_set_dict})</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${json_string}</var>
</assign>
<msg timestamp="20170119 23:25:48.915" level="INFO">${json_string} = {"organization_id": 1, "notes": "this is api-policy-set-01", "name": "api-policy-set-01", "policies": []}</msg>
<status status="PASS" endtime="20170119 23:25:48.915" starttime="20170119 23:25:48.911"></status>
</kw>
<kw name="Get Request" library="RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policysets</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:25:49.364" level="INFO">Get Request using : alias=automoxapi, uri=/policysets, headers=None </msg>
<msg timestamp="20170119 23:25:49.364" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170119 23:25:49.364" starttime="20170119 23:25:48.916"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20170119 23:25:49.366" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170119 23:25:49.366" starttime="20170119 23:25:49.365"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>@{resp_json}</var>
</assign>
<msg timestamp="20170119 23:25:49.368" level="INFO">@{resp_json} = [ {u'name': u'PolicySet 2', u'notes': u'Some more notes', u'organization_id': 1, u'create_time': u'2017-01-02 01:47:06.796947', u'policies': [], u'id': 2} | {u'name': u'PolicySet 1', u'notes': u'Some ...</msg>
<status status="PASS" endtime="20170119 23:25:49.368" starttime="20170119 23:25:49.367"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp_json}</arg>
</arguments>
<msg timestamp="20170119 23:25:49.370" level="INFO">[{u'name': u'PolicySet 2', u'notes': u'Some more notes', u'organization_id': 1, u'create_time': u'2017-01-02 01:47:06.796947', u'policies': [], u'id': 2}, {u'name': u'PolicySet 1', u'notes': u'Some notes', u'organization_id': 1, u'create_time': u'2017-01-02 01:47:06.793462', u'policies': [1, 12], u'id': 1}, {u'name': u'api-policy-set-01', u'notes': u'this is api-policy-set-01', u'organization_id': 1, u'create_time': u'2017-01-19 17:56:09.192596', u'policies': [], u'id': 44}]</msg>
<status status="PASS" endtime="20170119 23:25:49.370" starttime="20170119 23:25:49.369"></status>
</kw>
<kw name="Policy Set List Should Contain Policy Set Details" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${json_string}</arg>
</arguments>
<msg timestamp="20170119 23:25:49.372" level="INFO">Policy Set Details found in Policy Set List: {u'name': u'api-policy-set-01', u'notes': u'this is api-policy-set-01', u'organization_id': 1, u'create_time': u'2017-01-19 17:56:09.192596', u'policies': [], u'id': 44}</msg>
<status status="PASS" endtime="20170119 23:25:49.372" starttime="20170119 23:25:49.370"></status>
</kw>
<status status="PASS" endtime="20170119 23:25:49.372" starttime="20170119 23:25:48.906"></status>
</kw>
<doc>**Test Case**
User should be able to create new policy set
1. Create a new policy set with valid inputs
2. Verify whether policy set is created successfully</doc>
<tags>
<tag>api_tests</tag>
</tags>
<status status="PASS" endtime="20170119 23:25:49.373" critical="yes" starttime="20170119 23:25:48.547"></status>
</test>
<test id="s1-s1-t3" name="AX.TC5 Create a new Group">
<kw name="Create Group" library="api_keywords">
<arguments>
<arg>api-group-01</arg>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>api-policy-set-01</arg>
<arg>600</arg>
<arg>${true}</arg>
</arguments>
<kw name="Get Request" library="RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policysets</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:25:49.731" level="INFO">Get Request using : alias=automoxapi, uri=/policysets, headers=None </msg>
<msg timestamp="20170119 23:25:49.731" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170119 23:25:49.732" starttime="20170119 23:25:49.380"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>@{resp_json}</var>
</assign>
<msg timestamp="20170119 23:25:49.733" level="INFO">@{resp_json} = [ {u'name': u'PolicySet 2', u'notes': u'Some more notes', u'organization_id': 1, u'create_time': u'2017-01-02 01:47:06.796947', u'policies': [], u'id': 2} | {u'name': u'PolicySet 1', u'notes': u'Some ...</msg>
<status status="PASS" endtime="20170119 23:25:49.733" starttime="20170119 23:25:49.732"></status>
</kw>
<kw name="Get Policy Set Id" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${policy_set_name}</arg>
</arguments>
<assign>
<var>${policy_set_id}</var>
</assign>
<msg timestamp="20170119 23:25:49.734" level="INFO">Policy Set ID for api-policy-set-01 is44</msg>
<msg timestamp="20170119 23:25:49.734" level="INFO">${policy_set_id} = 44</msg>
<status status="PASS" endtime="20170119 23:25:49.734" starttime="20170119 23:25:49.733"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${policy_set_id}</arg>
</arguments>
<msg timestamp="20170119 23:25:49.735" level="INFO">44</msg>
<status status="PASS" endtime="20170119 23:25:49.735" starttime="20170119 23:25:49.735"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${policy_set_id}</arg>
</arguments>
<assign>
<var>${policy_set_id_int}</var>
</assign>
<msg timestamp="20170119 23:25:49.736" level="INFO">${policy_set_id_int} = 44</msg>
<status status="PASS" endtime="20170119 23:25:49.736" starttime="20170119 23:25:49.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=${name}</arg>
<arg>parent_server_group_id=${parent_server_group_id}</arg>
<arg>policy_set_id=${policy_set_id}</arg>
<arg>refresh_interval=${refresh_interval}</arg>
<arg>override=${override}</arg>
</arguments>
<assign>
<var>&amp;{group_dict}</var>
</assign>
<msg timestamp="20170119 23:25:49.737" level="INFO">&amp;{group_dict} = { name=api-group-01 | parent_server_group_id=1 | policy_set_id=44 | refresh_interval=600 | override=True }</msg>
<status status="PASS" endtime="20170119 23:25:49.737" starttime="20170119 23:25:49.736"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.dumps(${group_dict})</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${json_string}</var>
</assign>
<msg timestamp="20170119 23:25:49.739" level="INFO">${json_string} = {"override": true, "policy_set_id": 44, "parent_server_group_id": 1, "name": "api-group-01", "refresh_interval": "600"}</msg>
<status status="PASS" endtime="20170119 23:25:49.739" starttime="20170119 23:25:49.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>o=${organization_id}</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20170119 23:25:49.740" level="INFO">${params} = {u'o': 1}</msg>
<status status="PASS" endtime="20170119 23:25:49.740" starttime="20170119 23:25:49.739"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_string}</arg>
</arguments>
<msg timestamp="20170119 23:25:49.740" level="INFO">{"override": true, "policy_set_id": 44, "parent_server_group_id": 1, "name": "api-group-01", "refresh_interval": "600"}</msg>
<status status="PASS" endtime="20170119 23:25:49.740" starttime="20170119 23:25:49.740"></status>
</kw>
<kw name="Post Request" library="RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/servergroups</arg>
<arg>data=${json_string}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:25:50.092" level="INFO">Post Request using : alias=automoxapi, uri=/servergroups, data=&lt;empty&gt;, headers=None, files=None, allow_redirects=True </msg>
<msg timestamp="20170119 23:25:50.093" level="INFO">${resp} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20170119 23:25:50.094" starttime="20170119 23:25:49.740"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20170119 23:25:50.096" level="INFO">{}</msg>
<status status="PASS" endtime="20170119 23:25:50.097" starttime="20170119 23:25:50.094"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20170119 23:25:50.100" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170119 23:25:50.100" starttime="20170119 23:25:50.098"></status>
</kw>
<status status="PASS" endtime="20170119 23:25:50.101" starttime="20170119 23:25:49.379"></status>
</kw>
<kw name="Group should be created successfully" library="api_keywords">
<arguments>
<arg>api-group-01</arg>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>api-policy-set-01</arg>
<arg>${600}</arg>
<arg>${true}</arg>
</arguments>
<kw name="Get Request" library="RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policysets</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:25:50.465" level="INFO">Get Request using : alias=automoxapi, uri=/policysets, headers=None </msg>
<msg timestamp="20170119 23:25:50.465" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170119 23:25:50.465" starttime="20170119 23:25:50.106"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>@{resp_json}</var>
</assign>
<msg timestamp="20170119 23:25:50.467" level="INFO">@{resp_json} = [ {u'name': u'PolicySet 2', u'notes': u'Some more notes', u'organization_id': 1, u'create_time': u'2017-01-02 01:47:06.796947', u'policies': [], u'id': 2} | {u'name': u'PolicySet 1', u'notes': u'Some ...</msg>
<status status="PASS" endtime="20170119 23:25:50.468" starttime="20170119 23:25:50.466"></status>
</kw>
<kw name="Get Policy Set Id" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${policy_set_name}</arg>
</arguments>
<assign>
<var>${policy_set_id}</var>
</assign>
<msg timestamp="20170119 23:25:50.469" level="INFO">Policy Set ID for api-policy-set-01 is44</msg>
<msg timestamp="20170119 23:25:50.470" level="INFO">${policy_set_id} = 44</msg>
<status status="PASS" endtime="20170119 23:25:50.470" starttime="20170119 23:25:50.468"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${policy_set_id}</arg>
</arguments>
<msg timestamp="20170119 23:25:50.471" level="INFO">44</msg>
<status status="PASS" endtime="20170119 23:25:50.471" starttime="20170119 23:25:50.470"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${policy_set_id}</arg>
</arguments>
<assign>
<var>${policy_set_id_int}</var>
</assign>
<msg timestamp="20170119 23:25:50.473" level="INFO">${policy_set_id_int} = 44</msg>
<status status="PASS" endtime="20170119 23:25:50.473" starttime="20170119 23:25:50.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=${name}</arg>
<arg>parent_server_group_id=${parent_server_group_id}</arg>
<arg>policy_set_id=${policy_set_id_int}</arg>
<arg>refresh_interval=${refresh_interval}</arg>
<arg>override=${override}</arg>
</arguments>
<assign>
<var>&amp;{group_dict}</var>
</assign>
<msg timestamp="20170119 23:25:50.478" level="INFO">&amp;{group_dict} = { name=api-group-01 | parent_server_group_id=1 | policy_set_id=44 | refresh_interval=600 | override=True }</msg>
<status status="PASS" endtime="20170119 23:25:50.478" starttime="20170119 23:25:50.474"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.dumps(${group_dict})</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${json_string}</var>
</assign>
<msg timestamp="20170119 23:25:50.487" level="INFO">${json_string} = {"override": true, "policy_set_id": 44, "parent_server_group_id": 1, "name": "api-group-01", "refresh_interval": 600}</msg>
<status status="PASS" endtime="20170119 23:25:50.487" starttime="20170119 23:25:50.479"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_string}</arg>
</arguments>
<msg timestamp="20170119 23:25:50.489" level="INFO">{"override": true, "policy_set_id": 44, "parent_server_group_id": 1, "name": "api-group-01", "refresh_interval": 600}</msg>
<status status="PASS" endtime="20170119 23:25:50.489" starttime="20170119 23:25:50.487"></status>
</kw>
<kw name="Get Request" library="RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/servergroups</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:25:50.844" level="INFO">Get Request using : alias=automoxapi, uri=/servergroups, headers=None </msg>
<msg timestamp="20170119 23:25:50.845" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170119 23:25:50.845" starttime="20170119 23:25:50.490"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20170119 23:25:50.846" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170119 23:25:50.847" starttime="20170119 23:25:50.845"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>@{resp_json}</var>
</assign>
<msg timestamp="20170119 23:25:50.849" level="INFO">@{resp_json} = [ {u'name': u'', u'policy_set_id': 1, u'parent_server_group_id': 1, u'override': True, u'id': 1, u'refresh_interval': 1440} | {u'name': u'api-group-01', u'policy_set_id': 44, u'parent_server_group_id'...</msg>
<status status="PASS" endtime="20170119 23:25:50.849" starttime="20170119 23:25:50.847"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp_json}</arg>
</arguments>
<msg timestamp="20170119 23:25:50.850" level="INFO">[{u'name': u'', u'policy_set_id': 1, u'parent_server_group_id': 1, u'override': True, u'id': 1, u'refresh_interval': 1440}, {u'name': u'api-group-01', u'policy_set_id': 44, u'parent_server_group_id': 1, u'override': True, u'id': 40, u'refresh_interval': 600}]</msg>
<status status="PASS" endtime="20170119 23:25:50.850" starttime="20170119 23:25:50.849"></status>
</kw>
<kw name="Group List Should Contain Group Details" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${json_string}</arg>
</arguments>
<msg timestamp="20170119 23:25:50.852" level="INFO">Group Details found in Group List: {u'name': u'api-group-01', u'policy_set_id': 44, u'parent_server_group_id': 1, u'override': True, u'id': 40, u'refresh_interval': 600}</msg>
<status status="PASS" endtime="20170119 23:25:50.852" starttime="20170119 23:25:50.851"></status>
</kw>
<status status="PASS" endtime="20170119 23:25:50.852" starttime="20170119 23:25:50.102"></status>
</kw>
<doc>**Test Case**
User should be able to create new group
1. Create a new group with valid inputs
2. Verify whether group is created successfully</doc>
<tags>
<tag>api_tests</tag>
</tags>
<status status="PASS" endtime="20170119 23:25:50.854" critical="yes" starttime="20170119 23:25:49.377"></status>
</test>
<test id="s1-s1-t4" name="AX.TC6 Assign Endpoints to a Group">
<kw name="Assign Endpoint to Group" library="api_keywords">
<arguments>
<arg>test</arg>
<arg>api-group-01</arg>
<arg>${1}</arg>
</arguments>
<kw name="Get Request" library="RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/servers</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:25:56.819" level="INFO">Get Request using : alias=automoxapi, uri=/servers, headers=None </msg>
<msg timestamp="20170119 23:25:56.819" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170119 23:25:56.820" starttime="20170119 23:25:50.861"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>@{resp_json}</var>
</assign>
<msg timestamp="20170119 23:25:56.851" level="INFO">@{resp_json} = [ {u'os_version_id': 67, u'last_update_time': None, u'create_time': u'2017-01-03 04:12:55.501582', u'needs_reboot': False, u'timezone': u'UTC+00', u'id': 28, u'uptime': 92848, u'patches': 12, u'detail...</msg>
<status status="PASS" endtime="20170119 23:25:56.851" starttime="20170119 23:25:56.820"></status>
</kw>
<kw name="Get Endpoint Id" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${endpoint_name}</arg>
</arguments>
<assign>
<var>${endpoint_id}</var>
</assign>
<msg timestamp="20170119 23:25:56.851" level="INFO">Endpoint ID for test is4</msg>
<msg timestamp="20170119 23:25:56.852" level="INFO">${endpoint_id} = 4</msg>
<status status="PASS" endtime="20170119 23:25:56.852" starttime="20170119 23:25:56.851"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${endpoint_id}</arg>
</arguments>
<msg timestamp="20170119 23:25:56.852" level="INFO">4</msg>
<status status="PASS" endtime="20170119 23:25:56.852" starttime="20170119 23:25:56.852"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${endpoint_id}</arg>
</arguments>
<assign>
<var>${endpoint_id_int}</var>
</assign>
<msg timestamp="20170119 23:25:56.853" level="INFO">${endpoint_id_int} = 4</msg>
<status status="PASS" endtime="20170119 23:25:56.853" starttime="20170119 23:25:56.852"></status>
</kw>
<kw name="Get Endpoint Json" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${endpoint_id_int}</arg>
</arguments>
<assign>
<var>${endpoint_json}</var>
</assign>
<msg timestamp="20170119 23:25:56.853" level="INFO">Endpoint Json for 4 is{u'os_version_id': 66, u'last_update_time': None, u'create_time': u'2017-01-02 19:10:27.40026', u'needs_reboot': False, u'timezone': u'UTC+00', u'id': 4, u'uptime': 60249, u'patches': 1, u'detail': {u'SERVICETAG': u'', u'DISKS': [{u'TYPE': u'', u'SIZE': u'32212254720'}], u'VENDOR': u'Xen', u'NICS': [{u'VENDOR': u'', u'IPS': [], u'MAC': u'02:42:ac:11:00:04', u'CONNECTED': True, u'DEVICE': u'eth0', u'TYPE': u'enet'}], u'RAM': u'4147056640', u'CPU': u'Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz', u'VERSION': u'4.2.amazon', u'MODEL': u'HVM domU', u'SERIAL': u'ec243685-efea-4817-285e-bd4348bf525a'}, u'server_group_id': 1, u'os_version': u'7.3', u'ip_addrs': [u'1.2.3.4'], u'last_refresh_time': u'2017-01-03T03:09:32+0000', u'os_name': u'CentOS', u'tags': [u'foo', u'bar'], u'deleted': False, u'policy_status': [{u'status': 2, u'policy_set_id': 1, u'policy_name': u'Patch Policy Foo', u'result': u'{}', u'policy_type_name': u'patch', u'policy_id': 1}], u'organization_id': 1, u'os_family': u'Linux', u'refresh_interval': None, u'name': u'test', u'uuid': u'608a8f9d-20ac-4644-872f-90466f7a6348', u'instance_id': u'i-b584fc7c', u'last_checkin_time': u'2017-01-02T19:10:47+0000'}</msg>
<msg timestamp="20170119 23:25:56.854" level="INFO">${endpoint_json} = {u'os_version_id': 66, u'last_update_time': None, u'create_time': u'2017-01-02 19:10:27.40026', u'needs_reboot': False, u'timezone': u'UTC+00', u'id': 4, u'uptime': 60249, u'patches': 1, u'detail': {u...</msg>
<status status="PASS" endtime="20170119 23:25:56.854" starttime="20170119 23:25:56.853"></status>
</kw>
<kw name="Get Request" library="RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/servergroups</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:25:57.202" level="INFO">Get Request using : alias=automoxapi, uri=/servergroups, headers=None </msg>
<msg timestamp="20170119 23:25:57.203" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170119 23:25:57.203" starttime="20170119 23:25:56.854"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>@{resp_json}</var>
</assign>
<msg timestamp="20170119 23:25:57.207" level="INFO">@{resp_json} = [ {u'name': u'', u'policy_set_id': 1, u'parent_server_group_id': 1, u'override': True, u'id': 1, u'refresh_interval': 1440} | {u'name': u'api-group-01', u'policy_set_id': 44, u'parent_server_group_id'...</msg>
<status status="PASS" endtime="20170119 23:25:57.208" starttime="20170119 23:25:57.204"></status>
</kw>
<kw name="Get Group Id" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${group_name}</arg>
</arguments>
<assign>
<var>${group_id}</var>
</assign>
<msg timestamp="20170119 23:25:57.210" level="INFO">Group ID for api-group-01 is40</msg>
<msg timestamp="20170119 23:25:57.210" level="INFO">${group_id} = 40</msg>
<status status="PASS" endtime="20170119 23:25:57.210" starttime="20170119 23:25:57.208"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${group_id}</arg>
</arguments>
<msg timestamp="20170119 23:25:57.211" level="INFO">40</msg>
<status status="PASS" endtime="20170119 23:25:57.212" starttime="20170119 23:25:57.211"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${group_id}</arg>
</arguments>
<assign>
<var>${group_id_int}</var>
</assign>
<msg timestamp="20170119 23:25:57.213" level="INFO">${group_id_int} = 40</msg>
<status status="PASS" endtime="20170119 23:25:57.213" starttime="20170119 23:25:57.212"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${endpoint_json}</arg>
<arg>server_group_id</arg>
<arg>${group_id_int}</arg>
</arguments>
<status status="PASS" endtime="20170119 23:25:57.215" starttime="20170119 23:25:57.214"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${endpoint_json}</arg>
</arguments>
<msg timestamp="20170119 23:25:57.216" level="INFO">{u'os_version_id': 66, u'last_update_time': None, u'create_time': u'2017-01-02 19:10:27.40026', u'needs_reboot': False, u'timezone': u'UTC+00', u'id': 4, u'uptime': 60249, u'patches': 1, u'detail': {u'SERVICETAG': u'', u'DISKS': [{u'TYPE': u'', u'SIZE': u'32212254720'}], u'VENDOR': u'Xen', u'NICS': [{u'VENDOR': u'', u'IPS': [], u'MAC': u'02:42:ac:11:00:04', u'CONNECTED': True, u'DEVICE': u'eth0', u'TYPE': u'enet'}], u'RAM': u'4147056640', u'CPU': u'Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz', u'VERSION': u'4.2.amazon', u'MODEL': u'HVM domU', u'SERIAL': u'ec243685-efea-4817-285e-bd4348bf525a'}, u'server_group_id': 40, u'os_version': u'7.3', u'ip_addrs': [u'1.2.3.4'], u'last_refresh_time': u'2017-01-03T03:09:32+0000', u'os_name': u'CentOS', u'tags': [u'foo', u'bar'], u'deleted': False, u'policy_status': [{u'status': 2, u'policy_set_id': 1, u'policy_name': u'Patch Policy Foo', u'result': u'{}', u'policy_type_name': u'patch', u'policy_id': 1}], u'organization_id': 1, u'os_family': u'Linux', u'refresh_interval': None, u'name': u'test', u'uuid': u'608a8f9d-20ac-4644-872f-90466f7a6348', u'instance_id': u'i-b584fc7c', u'last_checkin_time': u'2017-01-02T19:10:47+0000'}</msg>
<status status="PASS" endtime="20170119 23:25:57.217" starttime="20170119 23:25:57.215"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.dumps(${endpoint_json})</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${endpoint_json_string}</var>
</assign>
<msg timestamp="20170119 23:25:57.225" level="INFO">${endpoint_json_string} = {"os_version_id": 66, "last_update_time": null, "create_time": "2017-01-02 19:10:27.40026", "needs_reboot": false, "timezone": "UTC+00", "id": 4, "uptime": 60249, "patches": 1, "detail": {"SERVICETAG"...</msg>
<status status="PASS" endtime="20170119 23:25:57.225" starttime="20170119 23:25:57.217"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>o=${organization_id}</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20170119 23:25:57.227" level="INFO">${params} = {u'o': 1}</msg>
<status status="PASS" endtime="20170119 23:25:57.227" starttime="20170119 23:25:57.225"></status>
</kw>
<kw name="Put Request" library="RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/servers/${endpoint_id_int}</arg>
<arg>data=${endpoint_json_string}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:25:57.675" level="INFO">Put Request using : alias=automoxapi, uri=/servers/4, data={"os_version_id": 66, "last_update_time": null, "create_time": "2017-01-02 19:10:27.40026", "needs_reboot": false, "timezone": "UTC+00", "id": 4, "uptime": 60249, "patches": 1, "detail": {"SERVICETAG": "", "VERSION": "4.2.amazon", "RAM": "4147056640", "VENDOR": "Xen", "SERIAL": "ec243685-efea-4817-285e-bd4348bf525a", "NICS": [{"VENDOR": "", "IPS": [], "MAC": "02:42:ac:11:00:04", "CONNECTED": true, "DEVICE": "eth0", "TYPE": "enet"}], "MODEL": "HVM domU", "DISKS": [{"TYPE": "", "SIZE": "32212254720"}], "CPU": "Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz"}, "server_group_id": 40, "os_version": "7.3", "ip_addrs": ["1.2.3.4"], "refresh_interval": null, "last_refresh_time": "2017-01-03T03:09:32+0000", "os_name": "CentOS", "tags": ["foo", "bar"], "deleted": false, "policy_status": [{"status": 2, "policy_set_id": 1, "policy_name": "Patch Policy Foo", "result": "{}", "policy_type_name": "patch", "policy_id": 1}], "organization_id": 1, "os_family": "Linux", "uuid": "608a8f9d-20ac-4644-872f-90466f7a6348", "name": "test", "instance_id": "i-b584fc7c", "last_checkin_time": "2017-01-02T19:10:47+0000"},                     headers=None, allow_redirects=True </msg>
<msg timestamp="20170119 23:25:57.676" level="INFO">${resp} = &lt;Response [204]&gt;</msg>
<status status="PASS" endtime="20170119 23:25:57.677" starttime="20170119 23:25:57.228"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20170119 23:25:57.680" level="INFO"></msg>
<status status="PASS" endtime="20170119 23:25:57.681" starttime="20170119 23:25:57.679"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<msg timestamp="20170119 23:25:57.682" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170119 23:25:57.683" starttime="20170119 23:25:57.681"></status>
</kw>
<status status="PASS" endtime="20170119 23:25:57.683" starttime="20170119 23:25:50.860"></status>
</kw>
<kw name="Endpoint Should be assigned to Group successfully" library="api_keywords">
<arguments>
<arg>test</arg>
<arg>api-group-01</arg>
<arg>${1}</arg>
</arguments>
<kw name="Get Request" library="RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/servers</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:26:04.232" level="INFO">Get Request using : alias=automoxapi, uri=/servers, headers=None </msg>
<msg timestamp="20170119 23:26:04.232" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170119 23:26:04.233" starttime="20170119 23:25:57.685"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>@{resp_json}</var>
</assign>
<msg timestamp="20170119 23:26:04.266" level="INFO">@{resp_json} = [ {u'os_version_id': 67, u'last_update_time': None, u'create_time': u'2017-01-03 04:12:55.501582', u'needs_reboot': False, u'timezone': u'UTC+00', u'id': 28, u'uptime': 92848, u'patches': 12, u'detail...</msg>
<status status="PASS" endtime="20170119 23:26:04.267" starttime="20170119 23:26:04.234"></status>
</kw>
<kw name="Get Endpoint Id" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${endpoint_name}</arg>
</arguments>
<assign>
<var>${endpoint_id}</var>
</assign>
<msg timestamp="20170119 23:26:04.267" level="INFO">Endpoint ID for test is4</msg>
<msg timestamp="20170119 23:26:04.268" level="INFO">${endpoint_id} = 4</msg>
<status status="PASS" endtime="20170119 23:26:04.268" starttime="20170119 23:26:04.267"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${endpoint_id}</arg>
</arguments>
<msg timestamp="20170119 23:26:04.268" level="INFO">4</msg>
<status status="PASS" endtime="20170119 23:26:04.268" starttime="20170119 23:26:04.268"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${endpoint_id}</arg>
</arguments>
<assign>
<var>${endpoint_id_int}</var>
</assign>
<msg timestamp="20170119 23:26:04.269" level="INFO">${endpoint_id_int} = 4</msg>
<status status="PASS" endtime="20170119 23:26:04.269" starttime="20170119 23:26:04.268"></status>
</kw>
<kw name="Get Endpoint Json" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${endpoint_id_int}</arg>
</arguments>
<assign>
<var>${endpoint_json}</var>
</assign>
<msg timestamp="20170119 23:26:04.270" level="INFO">Endpoint Json for 4 is{u'os_version_id': 66, u'last_update_time': None, u'create_time': u'2017-01-02 19:10:27.40026', u'needs_reboot': False, u'timezone': u'UTC+00', u'id': 4, u'uptime': 60249, u'patches': 1, u'detail': {u'SERVICETAG': u'', u'DISKS': [{u'TYPE': u'', u'SIZE': u'32212254720'}], u'VENDOR': u'Xen', u'NICS': [{u'VENDOR': u'', u'IPS': [], u'MAC': u'02:42:ac:11:00:04', u'CONNECTED': True, u'DEVICE': u'eth0', u'TYPE': u'enet'}], u'RAM': u'4147056640', u'CPU': u'Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz', u'VERSION': u'4.2.amazon', u'MODEL': u'HVM domU', u'SERIAL': u'ec243685-efea-4817-285e-bd4348bf525a'}, u'server_group_id': 40, u'os_version': u'7.3', u'ip_addrs': [u'1.2.3.4'], u'last_refresh_time': u'2017-01-03T03:09:32+0000', u'os_name': u'CentOS', u'tags': [u'foo', u'bar'], u'deleted': False, u'policy_status': [], u'organization_id': 1, u'os_family': u'Linux', u'refresh_interval': None, u'name': u'test', u'uuid': u'608a8f9d-20ac-4644-872f-90466f7a6348', u'instance_id': u'i-b584fc7c', u'last_checkin_time': u'2017-01-02T19:10:47+0000'}</msg>
<msg timestamp="20170119 23:26:04.270" level="INFO">${endpoint_json} = {u'os_version_id': 66, u'last_update_time': None, u'create_time': u'2017-01-02 19:10:27.40026', u'needs_reboot': False, u'timezone': u'UTC+00', u'id': 4, u'uptime': 60249, u'patches': 1, u'detail': {u...</msg>
<status status="PASS" endtime="20170119 23:26:04.270" starttime="20170119 23:26:04.269"></status>
</kw>
<kw name="Get Request" library="RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/servergroups</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:26:04.663" level="INFO">Get Request using : alias=automoxapi, uri=/servergroups, headers=None </msg>
<msg timestamp="20170119 23:26:04.663" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170119 23:26:04.663" starttime="20170119 23:26:04.270"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>@{resp_json}</var>
</assign>
<msg timestamp="20170119 23:26:04.664" level="INFO">@{resp_json} = [ {u'name': u'', u'policy_set_id': 1, u'parent_server_group_id': 1, u'override': True, u'id': 1, u'refresh_interval': 1440} | {u'name': u'api-group-01', u'policy_set_id': 44, u'parent_server_group_id'...</msg>
<status status="PASS" endtime="20170119 23:26:04.664" starttime="20170119 23:26:04.663"></status>
</kw>
<kw name="Get Group Id" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${group_name}</arg>
</arguments>
<assign>
<var>${group_id}</var>
</assign>
<msg timestamp="20170119 23:26:04.665" level="INFO">Group ID for api-group-01 is40</msg>
<msg timestamp="20170119 23:26:04.665" level="INFO">${group_id} = 40</msg>
<status status="PASS" endtime="20170119 23:26:04.665" starttime="20170119 23:26:04.664"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${group_id}</arg>
</arguments>
<msg timestamp="20170119 23:26:04.666" level="INFO">40</msg>
<status status="PASS" endtime="20170119 23:26:04.666" starttime="20170119 23:26:04.665"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${group_id}</arg>
</arguments>
<assign>
<var>${group_id_int}</var>
</assign>
<msg timestamp="20170119 23:26:04.666" level="INFO">${group_id_int} = 40</msg>
<status status="PASS" endtime="20170119 23:26:04.666" starttime="20170119 23:26:04.666"></status>
</kw>
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key``/``value`` must be found in a `dictionary`.</doc>
<arguments>
<arg>${endpoint_json}</arg>
<arg>server_group_id</arg>
<arg>${group_id_int}</arg>
<arg>Endpoint is not assigned to Group</arg>
</arguments>
<status status="PASS" endtime="20170119 23:26:04.667" starttime="20170119 23:26:04.666"></status>
</kw>
<status status="PASS" endtime="20170119 23:26:04.667" starttime="20170119 23:25:57.683"></status>
</kw>
<doc>**Test Case**
User should be able to assign endpoints to a group
1. Assign endpoint to a group
2. Verify whether endpoint is assigned to the group</doc>
<tags>
<tag>api_tests</tag>
</tags>
<status status="PASS" endtime="20170119 23:26:04.667" critical="yes" starttime="20170119 23:25:50.858"></status>
</test>
<test id="s1-s1-t5" name="AX.TC7 Create a Software Deployment Policy">
<kw name="Create Software Deployment Policy" library="api_keywords">
<arguments>
<arg>api-sw-deployment-policy-01</arg>
<arg>${1}</arg>
<arg>Linux</arg>
<arg>ftp</arg>
<arg>dnf install ftp</arg>
<arg>${254}</arg>
<arg>14:10</arg>
<arg>This is api-sw-deployment-policy-01</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>os_family=${os_family}</arg>
<arg>package_name=${package_name}</arg>
<arg>installation_code=${installation_code}</arg>
</arguments>
<assign>
<var>&amp;{configuration_dict}</var>
</assign>
<msg timestamp="20170119 23:26:04.670" level="INFO">&amp;{configuration_dict} = { os_family=Linux | package_name=ftp | installation_code=dnf install ftp }</msg>
<status status="PASS" endtime="20170119 23:26:04.671" starttime="20170119 23:26:04.670"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=${name}</arg>
<arg>policy_type_name=required_software</arg>
<arg>organization_id=${organization_id}</arg>
<arg>configuration=${configuration_dict}</arg>
<arg>schedule_days=${schedule_days}</arg>
<arg>schedule_time=${schedule_time}</arg>
<arg>notes=${notes}</arg>
</arguments>
<assign>
<var>&amp;{sw_deployment_policy_dict}</var>
</assign>
<msg timestamp="20170119 23:26:04.673" level="INFO">&amp;{sw_deployment_policy_dict} = { name=api-sw-deployment-policy-01 | policy_type_name=required_software | organization_id=1 | configuration={u'os_family': u'Linux', u'package_name': u'ftp', u'installation_code': u'dnf install ftp'} ...</msg>
<status status="PASS" endtime="20170119 23:26:04.673" starttime="20170119 23:26:04.671"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.dumps(${sw_deployment_policy_dict})</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${json_string}</var>
</assign>
<msg timestamp="20170119 23:26:04.676" level="INFO">${json_string} = {"name": "api-sw-deployment-policy-01", "schedule_time": "14:10", "schedule_days": 254, "organization_id": 1, "policy_type_name": "required_software", "configuration": {"os_family": "Linux", "installa...</msg>
<status status="PASS" endtime="20170119 23:26:04.676" starttime="20170119 23:26:04.674"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>o=${organization_id}</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20170119 23:26:04.677" level="INFO">${params} = {u'o': 1}</msg>
<status status="PASS" endtime="20170119 23:26:04.677" starttime="20170119 23:26:04.676"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_string}</arg>
</arguments>
<msg timestamp="20170119 23:26:04.678" level="INFO">{"name": "api-sw-deployment-policy-01", "schedule_time": "14:10", "schedule_days": 254, "organization_id": 1, "policy_type_name": "required_software", "configuration": {"os_family": "Linux", "installation_code": "dnf install ftp", "package_name": "ftp"}, "notes": "This is api-sw-deployment-policy-01"}</msg>
<status status="PASS" endtime="20170119 23:26:04.678" starttime="20170119 23:26:04.678"></status>
</kw>
<kw name="Post Request" library="RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policies</arg>
<arg>data=${json_string}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:26:05.035" level="INFO">Post Request using : alias=automoxapi, uri=/policies, data=&lt;empty&gt;, headers=None, files=None, allow_redirects=True </msg>
<msg timestamp="20170119 23:26:05.036" level="INFO">${resp} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20170119 23:26:05.036" starttime="20170119 23:26:04.678"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20170119 23:26:05.036" level="INFO">{}</msg>
<status status="PASS" endtime="20170119 23:26:05.036" starttime="20170119 23:26:05.036"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20170119 23:26:05.037" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170119 23:26:05.037" starttime="20170119 23:26:05.037"></status>
</kw>
<status status="PASS" endtime="20170119 23:26:05.037" starttime="20170119 23:26:04.669"></status>
</kw>
<kw name="Software Deployment Policy should be created successfully" library="api_keywords">
<arguments>
<arg>api-sw-deployment-policy-01</arg>
<arg>${1}</arg>
<arg>Linux</arg>
<arg>ftp</arg>
<arg>dnf install ftp</arg>
<arg>${254}</arg>
<arg>14:10</arg>
<arg>This is api-sw-deployment-policy-01</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>os_family=${os_family}</arg>
<arg>package_name=${package_name}</arg>
<arg>installation_code=${installation_code}</arg>
</arguments>
<assign>
<var>&amp;{configuration_dict}</var>
</assign>
<msg timestamp="20170119 23:26:05.039" level="INFO">&amp;{configuration_dict} = { os_family=Linux | package_name=ftp | installation_code=dnf install ftp }</msg>
<status status="PASS" endtime="20170119 23:26:05.039" starttime="20170119 23:26:05.039"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=${name}</arg>
<arg>policy_type_name=required_software</arg>
<arg>organization_id=${organization_id}</arg>
<arg>configuration=${configuration_dict}</arg>
<arg>schedule_days=${schedule_days}</arg>
<arg>schedule_time=${schedule_time}</arg>
<arg>notes=${notes}</arg>
</arguments>
<assign>
<var>&amp;{sw_deployment_policy_dict}</var>
</assign>
<msg timestamp="20170119 23:26:05.041" level="INFO">&amp;{sw_deployment_policy_dict} = { name=api-sw-deployment-policy-01 | policy_type_name=required_software | organization_id=1 | configuration={u'os_family': u'Linux', u'package_name': u'ftp', u'installation_code': u'dnf install ftp'} ...</msg>
<status status="PASS" endtime="20170119 23:26:05.041" starttime="20170119 23:26:05.040"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.dumps(${sw_deployment_policy_dict})</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${json_string}</var>
</assign>
<msg timestamp="20170119 23:26:05.044" level="INFO">${json_string} = {"name": "api-sw-deployment-policy-01", "schedule_time": "14:10", "schedule_days": 254, "organization_id": 1, "policy_type_name": "required_software", "configuration": {"os_family": "Linux", "installa...</msg>
<status status="PASS" endtime="20170119 23:26:05.044" starttime="20170119 23:26:05.042"></status>
</kw>
<kw name="Get Request" library="RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policies</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:26:05.661" level="INFO">Get Request using : alias=automoxapi, uri=/policies, headers=None </msg>
<msg timestamp="20170119 23:26:05.662" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170119 23:26:05.662" starttime="20170119 23:26:05.044"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20170119 23:26:05.663" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170119 23:26:05.663" starttime="20170119 23:26:05.662"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>@{resp_json}</var>
</assign>
<msg timestamp="20170119 23:26:05.664" level="INFO">@{resp_json} = [ {u'name': u'Patch Policy Foo', u'schedule_time': u'01:00', u'schedule_days': 254, u'organization_id': 1, u'create_time': u'2017-01-02 01:47:06.774433', u'notes': u'Notes blah', u'policy_type_name': ...</msg>
<status status="PASS" endtime="20170119 23:26:05.664" starttime="20170119 23:26:05.663"></status>
</kw>
<kw name="Policy List Should Contain Policy Details" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${json_string}</arg>
</arguments>
<msg timestamp="20170119 23:26:05.666" level="INFO">Policy Details found in Policy List: {u'name': u'api-sw-deployment-policy-01', u'schedule_time': u'14:10', u'schedule_days': 254, u'organization_id': 1, u'create_time': u'2017-01-19 17:56:25.320198', u'notes': u'This is api-sw-deployment-policy-01', u'policy_type_name': u'required_software', u'configuration': {u'os_family': u'Linux', u'installation_code': u'dnf install ftp', u'package_name': u'ftp'}, u'id': 110}</msg>
<status status="PASS" endtime="20170119 23:26:05.666" starttime="20170119 23:26:05.665"></status>
</kw>
<status status="PASS" endtime="20170119 23:26:05.666" starttime="20170119 23:26:05.038"></status>
</kw>
<doc>**Test Case**
User should be able to create Software Deployment Policy
1. Create a software deployment policy with valid inputs
2. Verify whether software deployment policy is created successfully</doc>
<tags>
<tag>api_tests</tag>
</tags>
<status status="PASS" endtime="20170119 23:26:05.667" critical="yes" starttime="20170119 23:26:04.668"></status>
</test>
<test id="s1-s1-t6" name="AX.TC8 Create a Custom Policy">
<kw name="Create Custom Policy" library="api_keywords">
<arguments>
<arg>api-custom-policy-01</arg>
<arg>${1}</arg>
<arg>Linux</arg>
<arg>test_code.sh</arg>
<arg>evaluation_code.sh</arg>
<arg>remediation_code.sh</arg>
<arg>${254}</arg>
<arg>14:10</arg>
<arg>This is api-custom-policy-01</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>resources/custom_policy/linux/${test_code_path}</arg>
</arguments>
<assign>
<var>${test_code}</var>
</assign>
<msg timestamp="20170119 23:26:05.670" html="yes" level="INFO">Getting file '&lt;a href="file://C:\workspace\projects\automox_tests\api_tests\resources\custom_policy\linux\test_code.sh"&gt;C:\workspace\projects\automox_tests\api_tests\resources\custom_policy\linux\test_code.sh&lt;/a&gt;'.</msg>
<msg timestamp="20170119 23:26:05.673" level="INFO">${test_code} = #!\/bin\/bash\n\n#Example Test Script for installing chrome on Linux machines\n#This script has been tested with Fedora 24 and Ubuntu 16.04.01 LTS\n#This script may not work on all systems. Modify to ...</msg>
<status status="PASS" endtime="20170119 23:26:05.673" starttime="20170119 23:26:05.670"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>resources/custom_policy/linux/${evaluation_code_path}</arg>
</arguments>
<assign>
<var>${evaluation_code}</var>
</assign>
<msg timestamp="20170119 23:26:05.674" html="yes" level="INFO">Getting file '&lt;a href="file://C:\workspace\projects\automox_tests\api_tests\resources\custom_policy\linux\evaluation_code.sh"&gt;C:\workspace\projects\automox_tests\api_tests\resources\custom_policy\linux\evaluation_code.sh&lt;/a&gt;'.</msg>
<msg timestamp="20170119 23:26:05.675" level="INFO">${evaluation_code} = #!\/bin\/bash\n\n#Example Test Script for installing chrome on Linux machines\n#This script has been tested with Fedora 24 and Ubuntu 16.04.01 LTS\n#This script may not work on all systems. Modify to ...</msg>
<status status="PASS" endtime="20170119 23:26:05.675" starttime="20170119 23:26:05.673"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>resources/custom_policy/linux/${remediation_code_path}</arg>
</arguments>
<assign>
<var>${remediation_code}</var>
</assign>
<msg timestamp="20170119 23:26:05.676" html="yes" level="INFO">Getting file '&lt;a href="file://C:\workspace\projects\automox_tests\api_tests\resources\custom_policy\linux\remediation_code.sh"&gt;C:\workspace\projects\automox_tests\api_tests\resources\custom_policy\linux\remediation_code.sh&lt;/a&gt;'.</msg>
<msg timestamp="20170119 23:26:05.678" level="INFO">${remediation_code} = #!\/bin\/bash\n\n#Example Remediation Script for installing chrome on Linux machines\n#This script has been tested with Fedora 24 and Ubuntu 16.04.01 LTS\n#This script may not work on all systems. Mod...</msg>
<status status="PASS" endtime="20170119 23:26:05.678" starttime="20170119 23:26:05.676"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>os_family=${os_family}</arg>
<arg>test_code=${test_code}</arg>
<arg>evaluation_code=${evaluation_code}</arg>
<arg>remediation_code=${remediation_code}</arg>
</arguments>
<assign>
<var>&amp;{configuration_dict}</var>
</assign>
<msg timestamp="20170119 23:26:05.680" level="INFO">&amp;{configuration_dict} = { os_family=Linux | test_code=#!\/bin\/bash\n\n#Example Test Script for installing chrome on Linux machines\n#This script has been tested with Fedora 24 and Ubuntu 16.04.01 LTS\n#This script may not w...</msg>
<status status="PASS" endtime="20170119 23:26:05.680" starttime="20170119 23:26:05.679"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=${name}</arg>
<arg>policy_type_name=custom</arg>
<arg>organization_id=${organization_id}</arg>
<arg>configuration=${configuration_dict}</arg>
<arg>schedule_days=${schedule_days}</arg>
<arg>schedule_time=${schedule_time}</arg>
<arg>notes=${notes}</arg>
</arguments>
<assign>
<var>&amp;{custom_policy_dict}</var>
</assign>
<msg timestamp="20170119 23:26:05.682" level="INFO">&amp;{custom_policy_dict} = { name=api-custom-policy-01 | policy_type_name=custom | organization_id=1 | configuration={u'os_family': u'Linux', u'test_code': u'#!\\/bin\\/bash\\n\\n#Example Test Script for installing chrome on Li...</msg>
<status status="PASS" endtime="20170119 23:26:05.682" starttime="20170119 23:26:05.680"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.dumps(${custom_policy_dict})</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${json_string}</var>
</assign>
<msg timestamp="20170119 23:26:05.685" level="INFO">${json_string} = {"name": "api-custom-policy-01", "schedule_time": "14:10", "schedule_days": 254, "organization_id": 1, "policy_type_name": "custom", "configuration": {"test_code": "#!\\/bin\\/bash\\n\\n#Example Test ...</msg>
<status status="PASS" endtime="20170119 23:26:05.685" starttime="20170119 23:26:05.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>o=${organization_id}</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20170119 23:26:05.686" level="INFO">${params} = {u'o': 1}</msg>
<status status="PASS" endtime="20170119 23:26:05.686" starttime="20170119 23:26:05.685"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_string}</arg>
</arguments>
<msg timestamp="20170119 23:26:05.687" level="INFO">{"name": "api-custom-policy-01", "schedule_time": "14:10", "schedule_days": 254, "organization_id": 1, "policy_type_name": "custom", "configuration": {"test_code": "#!\\/bin\\/bash\\n\\n#Example Test Script for installing chrome on Linux machines\\n#This script has been tested with Fedora 24 and Ubuntu 16.04.01 LTS\\n#This script may not work on all systems. Modify to fit your needs\\n\\nfunction Test_Chrome() {\\n\\tcat \\/etc\\/*release* | grep -E '(Fedora|Red Hat)' &gt;&amp; \\/dev\\/null\\n\\tif [[ $? -eq 0 ]]; then\\n\\t\\t\\trpm -qa | grep \\\"google-chrome-stable\\\" &gt;&amp; \\/dev\\/null\\n\\t\\t\\tif [[ $? -eq 0 ]]; then\\n\\t\\t\\t\\techo \\\"Test_Chrome script has detected Chrome.\\\" 1&gt;&amp;2\\n\\t\\t\\t\\treturn 0 #package is installed\\n\\t\\t\\telse\\n\\t\\t\\t\\techo \\\"Test_Chrome Script failed! Remediation scipt needs to run\\\" 1&gt;&amp;2\\n\\t\\t\\t\\treturn 1 #package is not installed\\n\\t\\t\\tfi\\n\\n\\tfi\\n\\n\\tcat \\/etc\\/*release* | grep -E '(Ubuntu|Debian)' &amp;&gt; \\/dev\\/null\\n\\tif [[ $? -eq 0 ]]; then\\n\\t\\tdpkg -l | grep \\\"google-chrome-stable\\\" &gt;&amp; \\/dev\\/null\\n\\t\\tif [[ $? -eq 0 ]]; then\\n\\t\\t\\t\\techo \\\"Test_Chrome script has detected Chrome.\\\" 1&gt;&amp;2\\n\\t\\t\\t\\treturn 0\\n\\t\\t\\telse\\n\\t\\t\\t\\techo \\\"Test_Chrome Script failed! Remediation scipt needs to run\\\" 1&gt;&amp;2\\n\\t\\t\\t\\treturn 1\\n\\t\\t\\tfi\\n\\tfi\\n}\\nTest_Chrome\\nexit $?\\n\n", "os_family": "Linux", "evaluation_code": "#!\\/bin\\/bash\\n\\n#Example Test Script for installing chrome on Linux machines\\n#This script has been tested with Fedora 24 and Ubuntu 16.04.01 LTS\\n#This script may not work on all systems. Modify to fit your needs\\n\\nfunction Test_Chrome() {\\n\\tcat \\/etc\\/*release* | grep -E '(Fedora|Red Hat)' &gt;&amp; \\/dev\\/null\\n\\tif [[ $? -eq 0 ]]; then\\n\\t\\t\\trpm -qa | grep \\\"google-chrome-stable\\\" &gt;&amp; \\/dev\\/null\\n\\t\\t\\tif [[ $? -eq 0 ]]; then\\n\\t\\t\\t\\techo \\\"Test_Chrome script has detected Chrome.\\\" 1&gt;&amp;2\\n\\t\\t\\t\\treturn 0 #package is installed\\n\\t\\t\\telse\\n\\t\\t\\t\\techo \\\"Test_Chrome Script failed! Remediation scipt needs to run\\\" 1&gt;&amp;2\\n\\t\\t\\t\\treturn 1 #package is not installed\\n\\t\\t\\tfi\\n\\n\\tfi\\n\\n\\tcat \\/etc\\/*release* | grep -E '(Ubuntu|Debian)' &amp;&gt; \\/dev\\/null\\n\\tif [[ $? -eq 0 ]]; then\\n\\t\\tdpkg -l | grep \\\"google-chrome-stable\\\" &gt;&amp; \\/dev\\/null\\n\\t\\tif [[ $? -eq 0 ]]; then\\n\\t\\t\\t\\techo \\\"Test_Chrome script has detected Chrome.\\\" 1&gt;&amp;2\\n\\t\\t\\t\\treturn 0\\n\\t\\t\\telse\\n\\t\\t\\t\\techo \\\"Test_Chrome Script failed! Remediation scipt needs to run\\\" 1&gt;&amp;2\\n\\t\\t\\t\\treturn 1\\n\\t\\t\\tfi\\n\\tfi\\n}\\nTest_Chrome\\nexit $?\\n\n", "remediation_code": "#!\\/bin\\/bash\\n\\n#Example Remediation Script for installing chrome on Linux machines\\n#This script has been tested with Fedora 24 and Ubuntu 16.04.01 LTS\\n#This script may not work on all systems. Modify to fit your needs\\n\\ncat \\/etc\\/*release* | grep -E '(Fedora|Red Hat)' &gt;&amp; \\/dev\\/null\\nif [[ $? -eq 0 ]]; then\\n#Add Chrome Repo:\\necho \\\"[google-chrome]\\nname=google-chrome - \\\\$basearch\\nbaseurl=http:\\/\\/dl.google.com\\/linux\\/chrome\\/rpm\\/stable\\/\\\\$basearch\\nenabled=1\\ngpgcheck=1\\ngpgkey=https:\\/\\/dl-ssl.google.com\\/linux\\/linux_signing_key.pub\\\" &gt; \\/etc\\/yum.repos.d\\/google-chrome.repo\\n#Install Chrome:\\nyum install google-chrome-stable -y &amp;&gt; \\/dev\\/null\\nfi\\n\\ncat \\/etc\\/*release* | grep -E '(Ubuntu|Debian)' &gt;&amp; \\/dev\\/null\\nif [[ $? -eq 0 ]]; then\\n\\techo \\\"deb http:\\/\\/dl.google.com\\/linux\\/chrome\\/deb\\/ stable main\\\" &gt;&gt; \\/etc\\/apt\\/sources.list.d\\n\\twget -q -O - https:\\/\\/dl-ssl.google.com\\/linux\\/linux_signing_key.pub | apt-key add -\\n\\tapt-get update\\n\\tapt-get install google-chrome-stable -y &amp;&gt; \\/dev\\/null\\nfi\\n\n"}, "notes": "This is api-custom-policy-01"}</msg>
<status status="PASS" endtime="20170119 23:26:05.687" starttime="20170119 23:26:05.687"></status>
</kw>
<kw name="Post Request" library="RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policies</arg>
<arg>data=${json_string}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:26:06.084" level="INFO">Post Request using : alias=automoxapi, uri=/policies, data=&lt;empty&gt;, headers=None, files=None, allow_redirects=True </msg>
<msg timestamp="20170119 23:26:06.084" level="INFO">${resp} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20170119 23:26:06.084" starttime="20170119 23:26:05.688"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20170119 23:26:06.085" level="INFO">{}</msg>
<status status="PASS" endtime="20170119 23:26:06.085" starttime="20170119 23:26:06.085"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20170119 23:26:06.086" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170119 23:26:06.086" starttime="20170119 23:26:06.085"></status>
</kw>
<status status="PASS" endtime="20170119 23:26:06.086" starttime="20170119 23:26:05.669"></status>
</kw>
<kw name="Custom Policy should be created successfully" library="api_keywords">
<arguments>
<arg>api-custom-policy-01</arg>
<arg>${1}</arg>
<arg>Linux</arg>
<arg>test_code.sh</arg>
<arg>evaluation_code.sh</arg>
<arg>remediation_code.sh</arg>
<arg>${254}</arg>
<arg>14:10</arg>
<arg>This is api-custom-policy-01</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>resources/custom_policy/linux/${test_code_path}</arg>
</arguments>
<assign>
<var>${test_code}</var>
</assign>
<msg timestamp="20170119 23:26:06.088" html="yes" level="INFO">Getting file '&lt;a href="file://C:\workspace\projects\automox_tests\api_tests\resources\custom_policy\linux\test_code.sh"&gt;C:\workspace\projects\automox_tests\api_tests\resources\custom_policy\linux\test_code.sh&lt;/a&gt;'.</msg>
<msg timestamp="20170119 23:26:06.089" level="INFO">${test_code} = #!\/bin\/bash\n\n#Example Test Script for installing chrome on Linux machines\n#This script has been tested with Fedora 24 and Ubuntu 16.04.01 LTS\n#This script may not work on all systems. Modify to ...</msg>
<status status="PASS" endtime="20170119 23:26:06.089" starttime="20170119 23:26:06.088"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>resources/custom_policy/linux/${evaluation_code_path}</arg>
</arguments>
<assign>
<var>${evaluation_code}</var>
</assign>
<msg timestamp="20170119 23:26:06.090" html="yes" level="INFO">Getting file '&lt;a href="file://C:\workspace\projects\automox_tests\api_tests\resources\custom_policy\linux\evaluation_code.sh"&gt;C:\workspace\projects\automox_tests\api_tests\resources\custom_policy\linux\evaluation_code.sh&lt;/a&gt;'.</msg>
<msg timestamp="20170119 23:26:06.090" level="INFO">${evaluation_code} = #!\/bin\/bash\n\n#Example Test Script for installing chrome on Linux machines\n#This script has been tested with Fedora 24 and Ubuntu 16.04.01 LTS\n#This script may not work on all systems. Modify to ...</msg>
<status status="PASS" endtime="20170119 23:26:06.091" starttime="20170119 23:26:06.089"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>resources/custom_policy/linux/${remediation_code_path}</arg>
</arguments>
<assign>
<var>${remediation_code}</var>
</assign>
<msg timestamp="20170119 23:26:06.091" html="yes" level="INFO">Getting file '&lt;a href="file://C:\workspace\projects\automox_tests\api_tests\resources\custom_policy\linux\remediation_code.sh"&gt;C:\workspace\projects\automox_tests\api_tests\resources\custom_policy\linux\remediation_code.sh&lt;/a&gt;'.</msg>
<msg timestamp="20170119 23:26:06.092" level="INFO">${remediation_code} = #!\/bin\/bash\n\n#Example Remediation Script for installing chrome on Linux machines\n#This script has been tested with Fedora 24 and Ubuntu 16.04.01 LTS\n#This script may not work on all systems. Mod...</msg>
<status status="PASS" endtime="20170119 23:26:06.092" starttime="20170119 23:26:06.091"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>os_family=${os_family}</arg>
<arg>test_code=${test_code}</arg>
<arg>evaluation_code=${evaluation_code}</arg>
<arg>remediation_code=${remediation_code}</arg>
</arguments>
<assign>
<var>&amp;{configuration_dict}</var>
</assign>
<msg timestamp="20170119 23:26:06.093" level="INFO">&amp;{configuration_dict} = { os_family=Linux | test_code=#!\/bin\/bash\n\n#Example Test Script for installing chrome on Linux machines\n#This script has been tested with Fedora 24 and Ubuntu 16.04.01 LTS\n#This script may not w...</msg>
<status status="PASS" endtime="20170119 23:26:06.093" starttime="20170119 23:26:06.092"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>name=${name}</arg>
<arg>policy_type_name=custom</arg>
<arg>organization_id=${organization_id}</arg>
<arg>configuration=${configuration_dict}</arg>
<arg>schedule_days=${schedule_days}</arg>
<arg>schedule_time=${schedule_time}</arg>
<arg>notes=${notes}</arg>
</arguments>
<assign>
<var>&amp;{custom_policy_dict}</var>
</assign>
<msg timestamp="20170119 23:26:06.095" level="INFO">&amp;{custom_policy_dict} = { name=api-custom-policy-01 | policy_type_name=custom | organization_id=1 | configuration={u'os_family': u'Linux', u'test_code': u'#!\\/bin\\/bash\\n\\n#Example Test Script for installing chrome on Li...</msg>
<status status="PASS" endtime="20170119 23:26:06.095" starttime="20170119 23:26:06.094"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.dumps(${custom_policy_dict})</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${json_string}</var>
</assign>
<msg timestamp="20170119 23:26:06.097" level="INFO">${json_string} = {"name": "api-custom-policy-01", "schedule_time": "14:10", "schedule_days": 254, "organization_id": 1, "policy_type_name": "custom", "configuration": {"test_code": "#!\\/bin\\/bash\\n\\n#Example Test ...</msg>
<status status="PASS" endtime="20170119 23:26:06.097" starttime="20170119 23:26:06.095"></status>
</kw>
<kw name="Get Request" library="RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policies</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:26:06.477" level="INFO">Get Request using : alias=automoxapi, uri=/policies, headers=None </msg>
<msg timestamp="20170119 23:26:06.477" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170119 23:26:06.477" starttime="20170119 23:26:06.097"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20170119 23:26:06.478" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170119 23:26:06.479" starttime="20170119 23:26:06.478"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>@{resp_json}</var>
</assign>
<msg timestamp="20170119 23:26:06.480" level="INFO">@{resp_json} = [ {u'name': u'Patch Policy Foo', u'schedule_time': u'01:00', u'schedule_days': 254, u'organization_id': 1, u'create_time': u'2017-01-02 01:47:06.774433', u'notes': u'Notes blah', u'policy_type_name': ...</msg>
<status status="PASS" endtime="20170119 23:26:06.480" starttime="20170119 23:26:06.479"></status>
</kw>
<kw name="Policy List Should Contain Policy Details" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${json_string}</arg>
</arguments>
<msg timestamp="20170119 23:26:06.481" level="INFO">Policy Details found in Policy List: {u'name': u'api-custom-policy-01', u'schedule_time': u'14:10', u'schedule_days': 254, u'organization_id': 1, u'create_time': u'2017-01-19 17:56:26.332275', u'notes': u'This is api-custom-policy-01', u'policy_type_name': u'custom', u'configuration': {u'test_code': u'#!\\/bin\\/bash\\n\\n#Example Test Script for installing chrome on Linux machines\\n#This script has been tested with Fedora 24 and Ubuntu 16.04.01 LTS\\n#This script may not work on all systems. Modify to fit your needs\\n\\nfunction Test_Chrome() {\\n\\tcat \\/etc\\/*release* | grep -E \'(Fedora|Red Hat)\' &gt;&amp; \\/dev\\/null\\n\\tif [[ $? -eq 0 ]]; then\\n\\t\\t\\trpm -qa | grep \\"google-chrome-stable\\" &gt;&amp; \\/dev\\/null\\n\\t\\t\\tif [[ $? -eq 0 ]]; then\\n\\t\\t\\t\\techo \\"Test_Chrome script has detected Chrome.\\" 1&gt;&amp;2\\n\\t\\t\\t\\treturn 0 #package is installed\\n\\t\\t\\telse\\n\\t\\t\\t\\techo \\"Test_Chrome Script failed! Remediation scipt needs to run\\" 1&gt;&amp;2\\n\\t\\t\\t\\treturn 1 #package is not installed\\n\\t\\t\\tfi\\n\\n\\tfi\\n\\n\\tcat \\/etc\\/*release* | grep -E \'(Ubuntu|Debian)\' &amp;&gt; \\/dev\\/null\\n\\tif [[ $? -eq 0 ]]; then\\n\\t\\tdpkg -l | grep \\"google-chrome-stable\\" &gt;&amp; \\/dev\\/null\\n\\t\\tif [[ $? -eq 0 ]]; then\\n\\t\\t\\t\\techo \\"Test_Chrome script has detected Chrome.\\" 1&gt;&amp;2\\n\\t\\t\\t\\treturn 0\\n\\t\\t\\telse\\n\\t\\t\\t\\techo \\"Test_Chrome Script failed! Remediation scipt needs to run\\" 1&gt;&amp;2\\n\\t\\t\\t\\treturn 1\\n\\t\\t\\tfi\\n\\tfi\\n}\\nTest_Chrome\\nexit $?\\n\n', u'os_family': u'Linux', u'evaluation_code': u'#!\\/bin\\/bash\\n\\n#Example Test Script for installing chrome on Linux machines\\n#This script has been tested with Fedora 24 and Ubuntu 16.04.01 LTS\\n#This script may not work on all systems. Modify to fit your needs\\n\\nfunction Test_Chrome() {\\n\\tcat \\/etc\\/*release* | grep -E \'(Fedora|Red Hat)\' &gt;&amp; \\/dev\\/null\\n\\tif [[ $? -eq 0 ]]; then\\n\\t\\t\\trpm -qa | grep \\"google-chrome-stable\\" &gt;&amp; \\/dev\\/null\\n\\t\\t\\tif [[ $? -eq 0 ]]; then\\n\\t\\t\\t\\techo \\"Test_Chrome script has detected Chrome.\\" 1&gt;&amp;2\\n\\t\\t\\t\\treturn 0 #package is installed\\n\\t\\t\\telse\\n\\t\\t\\t\\techo \\"Test_Chrome Script failed! Remediation scipt needs to run\\" 1&gt;&amp;2\\n\\t\\t\\t\\treturn 1 #package is not installed\\n\\t\\t\\tfi\\n\\n\\tfi\\n\\n\\tcat \\/etc\\/*release* | grep -E \'(Ubuntu|Debian)\' &amp;&gt; \\/dev\\/null\\n\\tif [[ $? -eq 0 ]]; then\\n\\t\\tdpkg -l | grep \\"google-chrome-stable\\" &gt;&amp; \\/dev\\/null\\n\\t\\tif [[ $? -eq 0 ]]; then\\n\\t\\t\\t\\techo \\"Test_Chrome script has detected Chrome.\\" 1&gt;&amp;2\\n\\t\\t\\t\\treturn 0\\n\\t\\t\\telse\\n\\t\\t\\t\\techo \\"Test_Chrome Script failed! Remediation scipt needs to run\\" 1&gt;&amp;2\\n\\t\\t\\t\\treturn 1\\n\\t\\t\\tfi\\n\\tfi\\n}\\nTest_Chrome\\nexit $?\\n\n', u'remediation_code': u'#!\\/bin\\/bash\\n\\n#Example Remediation Script for installing chrome on Linux machines\\n#This script has been tested with Fedora 24 and Ubuntu 16.04.01 LTS\\n#This script may not work on all systems. Modify to fit your needs\\n\\ncat \\/etc\\/*release* | grep -E \'(Fedora|Red Hat)\' &gt;&amp; \\/dev\\/null\\nif [[ $? -eq 0 ]]; then\\n#Add Chrome Repo:\\necho \\"[google-chrome]\\nname=google-chrome - \\\\$basearch\\nbaseurl=http:\\/\\/dl.google.com\\/linux\\/chrome\\/rpm\\/stable\\/\\\\$basearch\\nenabled=1\\ngpgcheck=1\\ngpgkey=https:\\/\\/dl-ssl.google.com\\/linux\\/linux_signing_key.pub\\" &gt; \\/etc\\/yum.repos.d\\/google-chrome.repo\\n#Install Chrome:\\nyum install google-chrome-stable -y &amp;&gt; \\/dev\\/null\\nfi\\n\\ncat \\/etc\\/*release* | grep -E \'(Ubuntu|Debian)\' &gt;&amp; \\/dev\\/null\\nif [[ $? -eq 0 ]]; then\\n\\techo \\"deb http:\\/\\/dl.google.com\\/linux\\/chrome\\/deb\\/ stable main\\" &gt;&gt; \\/etc\\/apt\\/sources.list.d\\n\\twget -q -O - https:\\/\\/dl-ssl.google.com\\/linux\\/linux_signing_key.pub | apt-key add -\\n\\tapt-get update\\n\\tapt-get install google-chrome-stable -y &amp;&gt; \\/dev\\/null\\nfi\\n\n'}, u'id': 111}</msg>
<status status="PASS" endtime="20170119 23:26:06.481" starttime="20170119 23:26:06.480"></status>
</kw>
<status status="PASS" endtime="20170119 23:26:06.481" starttime="20170119 23:26:06.087"></status>
</kw>
<status status="PASS" endtime="20170119 23:26:06.481" critical="yes" starttime="20170119 23:26:05.668"></status>
</test>
<kw type="teardown" name="API Suite Cleanup" library="api_keywords">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Delete Policy</arg>
<arg>api-sw-deployment-policy-01</arg>
<arg>${1}</arg>
</arguments>
<kw name="Delete Policy" library="api_keywords">
<arguments>
<arg>api-sw-deployment-policy-01</arg>
<arg>${1}</arg>
</arguments>
<kw name="Get Request" library="RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policies</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:26:06.990" level="INFO">Get Request using : alias=automoxapi, uri=/policies, headers=None </msg>
<msg timestamp="20170119 23:26:06.991" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170119 23:26:06.991" starttime="20170119 23:26:06.485"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>@{resp_json}</var>
</assign>
<msg timestamp="20170119 23:26:06.993" level="INFO">@{resp_json} = [ {u'name': u'Patch Policy Foo', u'schedule_time': u'01:00', u'schedule_days': 254, u'organization_id': 1, u'create_time': u'2017-01-02 01:47:06.774433', u'notes': u'Notes blah', u'policy_type_name': ...</msg>
<status status="PASS" endtime="20170119 23:26:06.994" starttime="20170119 23:26:06.991"></status>
</kw>
<kw name="Get Policy Id" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${policy_name}</arg>
</arguments>
<assign>
<var>${policy_id}</var>
</assign>
<msg timestamp="20170119 23:26:06.995" level="INFO">Policy ID for api-sw-deployment-policy-01 is110</msg>
<msg timestamp="20170119 23:26:06.995" level="INFO">${policy_id} = 110</msg>
<status status="PASS" endtime="20170119 23:26:06.995" starttime="20170119 23:26:06.994"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${policy_id}</arg>
</arguments>
<msg timestamp="20170119 23:26:06.996" level="INFO">110</msg>
<status status="PASS" endtime="20170119 23:26:06.996" starttime="20170119 23:26:06.996"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${policy_id}</arg>
</arguments>
<assign>
<var>${policy_id_int}</var>
</assign>
<msg timestamp="20170119 23:26:06.997" level="INFO">${policy_id_int} = 110</msg>
<status status="PASS" endtime="20170119 23:26:06.998" starttime="20170119 23:26:06.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>o=${organization_id}</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20170119 23:26:06.999" level="INFO">${params} = {u'o': 1}</msg>
<status status="PASS" endtime="20170119 23:26:06.999" starttime="20170119 23:26:06.998"></status>
</kw>
<kw name="Delete Request" library="RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policies/${policy_id_int}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:26:07.362" level="INFO">Delete Request using : alias=automoxapi, uri=/policies/110, data=(),                     headers=None, allow_redirects=True </msg>
<msg timestamp="20170119 23:26:07.363" level="INFO">${resp} = &lt;Response [204]&gt;</msg>
<status status="PASS" endtime="20170119 23:26:07.363" starttime="20170119 23:26:06.999"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20170119 23:26:07.364" level="INFO"></msg>
<status status="PASS" endtime="20170119 23:26:07.364" starttime="20170119 23:26:07.363"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<msg timestamp="20170119 23:26:07.365" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170119 23:26:07.365" starttime="20170119 23:26:07.364"></status>
</kw>
<status status="PASS" endtime="20170119 23:26:07.365" starttime="20170119 23:26:06.484"></status>
</kw>
<status status="PASS" endtime="20170119 23:26:07.365" starttime="20170119 23:26:06.484"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Delete Policy</arg>
<arg>api-patch-policy-01</arg>
<arg>${1}</arg>
</arguments>
<kw name="Delete Policy" library="api_keywords">
<arguments>
<arg>api-patch-policy-01</arg>
<arg>${1}</arg>
</arguments>
<kw name="Get Request" library="RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policies</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:26:07.808" level="INFO">Get Request using : alias=automoxapi, uri=/policies, headers=None </msg>
<msg timestamp="20170119 23:26:07.808" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170119 23:26:07.809" starttime="20170119 23:26:07.366"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>@{resp_json}</var>
</assign>
<msg timestamp="20170119 23:26:07.810" level="INFO">@{resp_json} = [ {u'name': u'Patch Policy Foo', u'schedule_time': u'01:00', u'schedule_days': 254, u'organization_id': 1, u'create_time': u'2017-01-02 01:47:06.774433', u'notes': u'Notes blah', u'policy_type_name': ...</msg>
<status status="PASS" endtime="20170119 23:26:07.810" starttime="20170119 23:26:07.809"></status>
</kw>
<kw name="Get Policy Id" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${policy_name}</arg>
</arguments>
<assign>
<var>${policy_id}</var>
</assign>
<msg timestamp="20170119 23:26:07.811" level="INFO">Policy ID for api-patch-policy-01 is109</msg>
<msg timestamp="20170119 23:26:07.811" level="INFO">${policy_id} = 109</msg>
<status status="PASS" endtime="20170119 23:26:07.811" starttime="20170119 23:26:07.810"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${policy_id}</arg>
</arguments>
<msg timestamp="20170119 23:26:07.812" level="INFO">109</msg>
<status status="PASS" endtime="20170119 23:26:07.812" starttime="20170119 23:26:07.811"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${policy_id}</arg>
</arguments>
<assign>
<var>${policy_id_int}</var>
</assign>
<msg timestamp="20170119 23:26:07.812" level="INFO">${policy_id_int} = 109</msg>
<status status="PASS" endtime="20170119 23:26:07.812" starttime="20170119 23:26:07.812"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>o=${organization_id}</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20170119 23:26:07.813" level="INFO">${params} = {u'o': 1}</msg>
<status status="PASS" endtime="20170119 23:26:07.813" starttime="20170119 23:26:07.813"></status>
</kw>
<kw name="Delete Request" library="RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policies/${policy_id_int}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:26:08.155" level="INFO">Delete Request using : alias=automoxapi, uri=/policies/109, data=(),                     headers=None, allow_redirects=True </msg>
<msg timestamp="20170119 23:26:08.156" level="INFO">${resp} = &lt;Response [204]&gt;</msg>
<status status="PASS" endtime="20170119 23:26:08.156" starttime="20170119 23:26:07.814"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20170119 23:26:08.157" level="INFO"></msg>
<status status="PASS" endtime="20170119 23:26:08.158" starttime="20170119 23:26:08.156"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<msg timestamp="20170119 23:26:08.159" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170119 23:26:08.159" starttime="20170119 23:26:08.158"></status>
</kw>
<status status="PASS" endtime="20170119 23:26:08.160" starttime="20170119 23:26:07.366"></status>
</kw>
<status status="PASS" endtime="20170119 23:26:08.160" starttime="20170119 23:26:07.365"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Delete Policy</arg>
<arg>api-custom-policy-01</arg>
<arg>${1}</arg>
</arguments>
<kw name="Delete Policy" library="api_keywords">
<arguments>
<arg>api-custom-policy-01</arg>
<arg>${1}</arg>
</arguments>
<kw name="Get Request" library="RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policies</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:26:08.524" level="INFO">Get Request using : alias=automoxapi, uri=/policies, headers=None </msg>
<msg timestamp="20170119 23:26:08.525" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170119 23:26:08.525" starttime="20170119 23:26:08.162"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>@{resp_json}</var>
</assign>
<msg timestamp="20170119 23:26:08.527" level="INFO">@{resp_json} = [ {u'name': u'Patch Policy Foo', u'schedule_time': u'01:00', u'schedule_days': 254, u'organization_id': 1, u'create_time': u'2017-01-02 01:47:06.774433', u'notes': u'Notes blah', u'policy_type_name': ...</msg>
<status status="PASS" endtime="20170119 23:26:08.527" starttime="20170119 23:26:08.525"></status>
</kw>
<kw name="Get Policy Id" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${policy_name}</arg>
</arguments>
<assign>
<var>${policy_id}</var>
</assign>
<msg timestamp="20170119 23:26:08.528" level="INFO">Policy ID for api-custom-policy-01 is111</msg>
<msg timestamp="20170119 23:26:08.528" level="INFO">${policy_id} = 111</msg>
<status status="PASS" endtime="20170119 23:26:08.528" starttime="20170119 23:26:08.527"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${policy_id}</arg>
</arguments>
<msg timestamp="20170119 23:26:08.528" level="INFO">111</msg>
<status status="PASS" endtime="20170119 23:26:08.528" starttime="20170119 23:26:08.528"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${policy_id}</arg>
</arguments>
<assign>
<var>${policy_id_int}</var>
</assign>
<msg timestamp="20170119 23:26:08.529" level="INFO">${policy_id_int} = 111</msg>
<status status="PASS" endtime="20170119 23:26:08.529" starttime="20170119 23:26:08.528"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>o=${organization_id}</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20170119 23:26:08.530" level="INFO">${params} = {u'o': 1}</msg>
<status status="PASS" endtime="20170119 23:26:08.530" starttime="20170119 23:26:08.529"></status>
</kw>
<kw name="Delete Request" library="RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policies/${policy_id_int}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:26:08.902" level="INFO">Delete Request using : alias=automoxapi, uri=/policies/111, data=(),                     headers=None, allow_redirects=True </msg>
<msg timestamp="20170119 23:26:08.902" level="INFO">${resp} = &lt;Response [204]&gt;</msg>
<status status="PASS" endtime="20170119 23:26:08.903" starttime="20170119 23:26:08.530"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20170119 23:26:08.904" level="INFO"></msg>
<status status="PASS" endtime="20170119 23:26:08.904" starttime="20170119 23:26:08.903"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<msg timestamp="20170119 23:26:08.907" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170119 23:26:08.907" starttime="20170119 23:26:08.905"></status>
</kw>
<status status="PASS" endtime="20170119 23:26:08.908" starttime="20170119 23:26:08.161"></status>
</kw>
<status status="PASS" endtime="20170119 23:26:08.908" starttime="20170119 23:26:08.160"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Delete Policy Set</arg>
<arg>api-policy-set-01</arg>
<arg>${1}</arg>
</arguments>
<kw name="Delete Policy Set" library="api_keywords">
<arguments>
<arg>api-policy-set-01</arg>
<arg>${1}</arg>
</arguments>
<kw name="Get Request" library="RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policysets</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:26:09.262" level="INFO">Get Request using : alias=automoxapi, uri=/policysets, headers=None </msg>
<msg timestamp="20170119 23:26:09.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170119 23:26:09.262" starttime="20170119 23:26:08.910"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>@{resp_json}</var>
</assign>
<msg timestamp="20170119 23:26:09.263" level="INFO">@{resp_json} = [ {u'name': u'PolicySet 2', u'notes': u'Some more notes', u'organization_id': 1, u'create_time': u'2017-01-02 01:47:06.796947', u'policies': [], u'id': 2} | {u'name': u'PolicySet 1', u'notes': u'Some ...</msg>
<status status="PASS" endtime="20170119 23:26:09.263" starttime="20170119 23:26:09.262"></status>
</kw>
<kw name="Get Policy Set Id" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${policy_set_name}</arg>
</arguments>
<assign>
<var>${policy_set_id}</var>
</assign>
<msg timestamp="20170119 23:26:09.264" level="INFO">Policy Set ID for api-policy-set-01 is44</msg>
<msg timestamp="20170119 23:26:09.264" level="INFO">${policy_set_id} = 44</msg>
<status status="PASS" endtime="20170119 23:26:09.264" starttime="20170119 23:26:09.263"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${policy_set_id}</arg>
</arguments>
<msg timestamp="20170119 23:26:09.265" level="INFO">44</msg>
<status status="PASS" endtime="20170119 23:26:09.265" starttime="20170119 23:26:09.265"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${policy_set_id}</arg>
</arguments>
<assign>
<var>${policy_set_id_int}</var>
</assign>
<msg timestamp="20170119 23:26:09.266" level="INFO">${policy_set_id_int} = 44</msg>
<status status="PASS" endtime="20170119 23:26:09.266" starttime="20170119 23:26:09.265"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>o=${organization_id}</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20170119 23:26:09.267" level="INFO">${params} = {u'o': 1}</msg>
<status status="PASS" endtime="20170119 23:26:09.267" starttime="20170119 23:26:09.266"></status>
</kw>
<kw name="Delete Request" library="RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/policysets/${policy_set_id_int}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:26:09.615" level="INFO">Delete Request using : alias=automoxapi, uri=/policysets/44, data=(),                     headers=None, allow_redirects=True </msg>
<msg timestamp="20170119 23:26:09.615" level="INFO">${resp} = &lt;Response [204]&gt;</msg>
<status status="PASS" endtime="20170119 23:26:09.615" starttime="20170119 23:26:09.267"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20170119 23:26:09.616" level="INFO"></msg>
<status status="PASS" endtime="20170119 23:26:09.616" starttime="20170119 23:26:09.615"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<msg timestamp="20170119 23:26:09.617" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170119 23:26:09.617" starttime="20170119 23:26:09.616"></status>
</kw>
<status status="PASS" endtime="20170119 23:26:09.617" starttime="20170119 23:26:08.909"></status>
</kw>
<status status="PASS" endtime="20170119 23:26:09.617" starttime="20170119 23:26:08.908"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Delete Group</arg>
<arg>api-group-01</arg>
<arg>${1}</arg>
</arguments>
<kw name="Delete Group" library="api_keywords">
<arguments>
<arg>api-group-01</arg>
<arg>${1}</arg>
</arguments>
<kw name="Get Request" library="RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/servergroups</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:26:10.117" level="INFO">Get Request using : alias=automoxapi, uri=/servergroups, headers=None </msg>
<msg timestamp="20170119 23:26:10.117" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170119 23:26:10.118" starttime="20170119 23:26:09.619"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>@{resp_json}</var>
</assign>
<msg timestamp="20170119 23:26:10.119" level="INFO">@{resp_json} = [ {u'name': u'', u'policy_set_id': 1, u'parent_server_group_id': 1, u'override': True, u'id': 1, u'refresh_interval': 1440} | {u'name': u'api-group-01', u'policy_set_id': None, u'parent_server_group_i...</msg>
<status status="PASS" endtime="20170119 23:26:10.119" starttime="20170119 23:26:10.118"></status>
</kw>
<kw name="Get Group Id" library="HelperKeywords">
<arguments>
<arg>${resp_json}</arg>
<arg>${group_name}</arg>
</arguments>
<assign>
<var>${group_id}</var>
</assign>
<msg timestamp="20170119 23:26:10.120" level="INFO">Group ID for api-group-01 is40</msg>
<msg timestamp="20170119 23:26:10.120" level="INFO">${group_id} = 40</msg>
<status status="PASS" endtime="20170119 23:26:10.120" starttime="20170119 23:26:10.119"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${group_id}</arg>
</arguments>
<msg timestamp="20170119 23:26:10.121" level="INFO">40</msg>
<status status="PASS" endtime="20170119 23:26:10.121" starttime="20170119 23:26:10.120"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${group_id}</arg>
</arguments>
<assign>
<var>${group_id_int}</var>
</assign>
<msg timestamp="20170119 23:26:10.124" level="INFO">${group_id_int} = 40</msg>
<status status="PASS" endtime="20170119 23:26:10.124" starttime="20170119 23:26:10.122"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>o=${organization_id}</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20170119 23:26:10.127" level="INFO">${params} = {u'o': 1}</msg>
<status status="PASS" endtime="20170119 23:26:10.127" starttime="20170119 23:26:10.125"></status>
</kw>
<kw name="Delete Request" library="RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>automoxapi</arg>
<arg>/servergroups/${group_id_int}</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20170119 23:26:10.612" level="INFO">Delete Request using : alias=automoxapi, uri=/servergroups/40, data=(),                     headers=None, allow_redirects=True </msg>
<msg timestamp="20170119 23:26:10.613" level="INFO">${resp} = &lt;Response [204]&gt;</msg>
<status status="PASS" endtime="20170119 23:26:10.613" starttime="20170119 23:26:10.127"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<msg timestamp="20170119 23:26:10.617" level="INFO"></msg>
<status status="PASS" endtime="20170119 23:26:10.617" starttime="20170119 23:26:10.615"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>204</arg>
</arguments>
<msg timestamp="20170119 23:26:10.620" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170119 23:26:10.621" starttime="20170119 23:26:10.618"></status>
</kw>
<status status="PASS" endtime="20170119 23:26:10.622" starttime="20170119 23:26:09.618"></status>
</kw>
<status status="PASS" endtime="20170119 23:26:10.623" starttime="20170119 23:26:09.618"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170119 23:26:10.625" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170119 23:26:10.625" starttime="20170119 23:26:10.624"></status>
</kw>
<status status="PASS" endtime="20170119 23:26:10.626" starttime="20170119 23:26:06.484"></status>
</kw>
<doc>API Functional Tests for Automox</doc>
<metadata>
<item name="Executed At">LAPTOP-3RS03335</item>
<item name="Operating System">Windows_NT</item>
<item name="Processor">6</item>
<item name="Test Framework">Robot Framework Python</item>
<item name="Test User">CopperTaurus</item>
<item name="Version">1.0</item>
</metadata>
<status status="PASS" endtime="20170119 23:26:10.627" starttime="20170119 23:25:45.256"></status>
</suite>
<status status="PASS" endtime="20170119 23:26:10.652" starttime="20170119 23:25:45.213"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="6">Critical Tests</stat>
<stat fail="0" pass="6">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="5">api_tests</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="Tests" pass="6">Tests</stat>
<stat fail="0" id="s1-s1" name="Api Tests" pass="6">Tests.Api Tests</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
